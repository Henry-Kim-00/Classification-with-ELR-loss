{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","gpuType":"T4","authorship_tag":"ABX9TyNVZCzIKeU+UzJxyAKhkX7i"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"id":"gspLJnaQm-fb","executionInfo":{"status":"ok","timestamp":1716404925355,"user_tz":-540,"elapsed":6357,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}},"outputId":"e7b84f2f-5d5c-4be0-faad-28a9adf1d715","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","source":["**train image data download**"],"metadata":{"id":"Ah3T6u1Q0gaf"}},{"cell_type":"code","source":["import numpy as np"],"metadata":{"id":"LsOcrhaPn9bS","executionInfo":{"status":"ok","timestamp":1716404928426,"user_tz":-540,"elapsed":389,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# Path to your .npz file in Google Drive\n","npz_file_path1 = '/content/drive/My Drive/CVtask/train_cifar100_nl_images.npz'\n","\n","# Load the .npz file\n","data1 = np.load(npz_file_path1, allow_pickle=True)\n","train_images = data1['images']"],"metadata":{"id":"f14RyPDOnsp_","executionInfo":{"status":"ok","timestamp":1716405014187,"user_tz":-540,"elapsed":85331,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["print(f'Loaded {len(train_images)} images from {npz_file_path1}')\n","print(train_images[0].shape)\n","print(train_images[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bUrswnoyntSF","executionInfo":{"status":"ok","timestamp":1716405014187,"user_tz":-540,"elapsed":8,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}},"outputId":"baa34816-11e1-475f-8072-1b5264e0b039"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Loaded 49999 images from /content/drive/My Drive/CVtask/train_cifar100_nl_images.npz\n","(3, 224, 224)\n","[[[255 255 255 ... 234 234 234]\n","  [255 255 255 ... 234 234 234]\n","  [255 255 255 ... 234 234 234]\n","  ...\n","  [255 255 255 ... 253 253 253]\n","  [255 255 255 ... 253 253 253]\n","  [255 255 255 ... 253 253 253]]\n","\n"," [[255 255 255 ... 194 194 194]\n","  [255 255 255 ... 194 194 194]\n","  [255 255 255 ... 194 194 194]\n","  ...\n","  [255 255 255 ... 255 255 255]\n","  [255 255 255 ... 255 255 255]\n","  [255 255 255 ... 255 255 255]]\n","\n"," [[199 199 199 ... 138 138 138]\n","  [199 199 199 ... 138 138 138]\n","  [199 199 199 ... 138 138 138]\n","  ...\n","  [255 255 255 ... 253 253 253]\n","  [255 255 255 ... 253 253 253]\n","  [255 255 255 ... 253 253 253]]]\n"]}]},{"cell_type":"code","source":["import torch"],"metadata":{"id":"a8ybcfWIo4N6","executionInfo":{"status":"ok","timestamp":1716405017400,"user_tz":-540,"elapsed":3217,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["train_images = torch.from_numpy(train_images)"],"metadata":{"id":"4hqmltp5pGXA","executionInfo":{"status":"ok","timestamp":1716405017401,"user_tz":-540,"elapsed":6,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["print(train_images.size())\n","print(train_images[0].size())\n","print(train_images[0][0].size())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vSlzr4BIpMR_","executionInfo":{"status":"ok","timestamp":1716405017401,"user_tz":-540,"elapsed":5,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}},"outputId":"f55bb172-0912-4dbe-b426-6ccfeb754331"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([49999, 3, 224, 224])\n","torch.Size([3, 224, 224])\n","torch.Size([224, 224])\n"]}]},{"cell_type":"markdown","source":["**test dataset download**"],"metadata":{"id":"lWWEtFaN1fUA"}},{"cell_type":"code","source":["# Path to your .npz file in Google Drive\n","npz_file_path2 = '/content/drive/My Drive/CVtask/test_cifar100_nl_images.npz'\n","\n","# Load the .npz file\n","data2 = np.load(npz_file_path2, allow_pickle=True)\n","test_images = data2['images']\n","\n","print(f'Loaded {len(test_images)} images from {npz_file_path2}')\n","print(test_images[0].shape)\n","\n","test_images = torch.from_numpy(test_images)\n","\n","print(test_images.size())\n","print(test_images[0].size())\n","print(test_images[0][0].size())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HhhiWOuQ1iP4","executionInfo":{"status":"ok","timestamp":1716405034636,"user_tz":-540,"elapsed":17241,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}},"outputId":"85e56428-62b4-442a-e1b5-5983f86f5234"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Loaded 9999 images from /content/drive/My Drive/CVtask/test_cifar100_nl_images.npz\n","(3, 224, 224)\n","torch.Size([9999, 3, 224, 224])\n","torch.Size([3, 224, 224])\n","torch.Size([224, 224])\n"]}]},{"cell_type":"markdown","source":["**train label data**"],"metadata":{"id":"HkO9Xeoj0t_J"}},{"cell_type":"code","source":["def cifar100_labels_to_tensor(labels):\n","    # List of CIFAR-100 fine labels\n","    label_list = [\n","        'apple', 'aquarium_fish', 'baby', 'bear', 'beaver', 'bed', 'bee', 'beetle', 'bicycle', 'bottle',\n","        'bowl', 'boy', 'bridge', 'bus', 'butterfly', 'camel', 'can', 'castle', 'caterpillar', 'cattle',\n","        'chair', 'chimpanzee', 'clock', 'cloud', 'cockroach', 'couch', 'crab', 'crocodile', 'cup', 'dinosaur',\n","        'dolphin', 'elephant', 'flatfish', 'forest', 'fox', 'girl', 'hamster', 'house', 'kangaroo', 'keyboard',\n","        'lamp', 'lawn_mower', 'leopard', 'lion', 'lizard', 'lobster', 'man', 'maple_tree', 'motorcycle', 'mountain',\n","        'mouse', 'mushroom', 'oak_tree', 'orange', 'orchid', 'otter', 'palm_tree', 'pear', 'pickup_truck', 'pine_tree',\n","        'plain', 'plate', 'poppy', 'porcupine', 'possum', 'rabbit', 'raccoon', 'ray', 'road', 'rocket',\n","        'rose', 'sea', 'seal', 'shark', 'shrew', 'skunk', 'skyscraper', 'snail', 'snake', 'spider',\n","        'squirrel', 'streetcar', 'sunflower', 'sweet_pepper', 'table', 'tank', 'telephone', 'television', 'tiger', 'tractor',\n","        'train', 'trout', 'tulip', 'turtle', 'wardrobe', 'whale', 'willow_tree', 'wolf', 'woman', 'worm'\n","    ]\n","\n","    # Create a mapping from string labels to numerical labels\n","    label_to_num = {label: num for num, label in enumerate(label_list)}\n","\n","    # Convert the numpy array of string labels to numerical labels\n","    numerical_labels = np.array([label_to_num[label] for label in labels])\n","\n","    # Convert the numerical labels to a PyTorch tensor\n","    tensor_labels = torch.tensor(numerical_labels, dtype=torch.long)\n","\n","    return tensor_labels"],"metadata":{"id":"mBr8_Og5pQF6","executionInfo":{"status":"ok","timestamp":1716405034637,"user_tz":-540,"elapsed":6,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["simple_labels = np.array(['apple', 'bear', 'camel', 'dolphin'])\n","simple_tensor_labels = cifar100_labels_to_tensor(simple_labels)\n","print(f\"The tensor corresponding to the labels {simple_labels} is {simple_tensor_labels}.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lji2awxiprc5","executionInfo":{"status":"ok","timestamp":1716405034637,"user_tz":-540,"elapsed":5,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}},"outputId":"10dcae56-9205-409f-8ce8-fd5cf6a31fb4"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["The tensor corresponding to the labels ['apple' 'bear' 'camel' 'dolphin'] is tensor([ 0,  3, 15, 30]).\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","train_data = pd.read_csv('/content/drive/MyDrive/CVtask/dataset/cifar100_nl/data/cifar100_nl.csv', header=None)\n","train_labels = train_data.iloc[:49999, 1].values\n","train_labels = cifar100_labels_to_tensor(train_labels)\n","\n","print(train_labels.size())\n","print(train_labels[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IBkdZvmapy-7","executionInfo":{"status":"ok","timestamp":1716405036614,"user_tz":-540,"elapsed":1980,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}},"outputId":"ffd99e78-55fe-45e0-fc83-aabf335d0dd5"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([49999])\n","tensor(24)\n"]}]},{"cell_type":"markdown","source":["**test label data**"],"metadata":{"id":"n5XlnuNK2AnN"}},{"cell_type":"code","source":["test_data = pd.read_csv('/content/drive/MyDrive/CVtask/dataset/cifar100_nl/data/cifar100_nl_test.csv', header=None)\n","test_labels = test_data.iloc[:49999, 1].values\n","test_labels = cifar100_labels_to_tensor(test_labels)\n","\n","print(test_labels.size())\n","print(test_labels[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cJFLuiHi1_zq","executionInfo":{"status":"ok","timestamp":1716405037158,"user_tz":-540,"elapsed":547,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}},"outputId":"2816990f-e962-49db-bdea-5589f0d2e23c"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([9999])\n","tensor(33)\n"]}]},{"cell_type":"markdown","source":["**Custom Dataset and DataLoader**"],"metadata":{"id":"QCciVAVZ1K7s"}},{"cell_type":"code","source":["import os\n","from torch.utils.data import Dataset, DataLoader\n","\n","class CustomImageDataset(Dataset):\n","    def __init__(self, images, labels, transform=None, target_transform=None):\n","        self.images = images\n","        self.labels = labels\n","        self.transform = transform\n","        self.target_transform = target_transform\n","\n","    def __len__(self):\n","        return len(self.images)\n","\n","    def __getitem__(self, idx):\n","        one_image = self.images[idx] / 255.0\n","        one_label = self.labels[idx]\n","\n","        if self.transform:\n","            one_image = self.transform(one_image)\n","        if self.target_transform:\n","            one_label = self.target_transform(one_label)\n","        return one_image, one_label"],"metadata":{"id":"jkw0mkPiqZJi","executionInfo":{"status":"ok","timestamp":1716405037158,"user_tz":-540,"elapsed":4,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["from torchvision import transforms, models\n","\n","#for AlexNet\n","transform_img = transforms.Compose([\n","\n","    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n","\n","])\n","\n","'''\n","#for AlexNet\n","transform_img = transforms.Compose([\n","    transforms.ToPILImage(),\n","    transforms.Resize(256),\n","    transforms.CenterCrop(224),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n","])\n","'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":54},"id":"2RWIfn1Yr7Dv","executionInfo":{"status":"ok","timestamp":1716405039176,"user_tz":-540,"elapsed":2021,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}},"outputId":"b6f0f4bc-0449-4e80-8925-4d2e053d82d3"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\n#for AlexNet\\ntransform_img = transforms.Compose([\\n    transforms.ToPILImage(),\\n    transforms.Resize(256),\\n    transforms.CenterCrop(224),\\n    transforms.ToTensor(),\\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\n])\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["train_dataset = CustomImageDataset(train_images, train_labels, transform_img)\n","train_dataloader = DataLoader(train_dataset, batch_size=64, shuffle=True)\n","\n","test_dataset = CustomImageDataset(test_images, test_labels, transform_img)\n","test_dataloader = DataLoader(test_dataset, batch_size=64, shuffle=False)"],"metadata":{"id":"10OQ9Y66rwiJ","executionInfo":{"status":"ok","timestamp":1716405039177,"user_tz":-540,"elapsed":13,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["print(len(train_dataset))\n","print(len(test_dataset))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2ciiaf2UsAVw","executionInfo":{"status":"ok","timestamp":1716405039178,"user_tz":-540,"elapsed":13,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}},"outputId":"fb24929c-9e65-43c1-b808-9f32dedc0f84"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["49999\n","9999\n"]}]},{"cell_type":"code","source":["#print(train_dataset[0].dtype)  # Should be torch.float32\n","#print(train_dataset[0].max(), train_dataset[0])  # Should be within [0.0, 1.0]\n","print(train_dataset[0][0].size())\n","print(train_dataset[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2IBoSr0ZSNVd","executionInfo":{"status":"ok","timestamp":1716405039178,"user_tz":-540,"elapsed":12,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}},"outputId":"9e34d601-ad82-4427-ecad-69d169e9b3ab"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([3, 224, 224])\n","(tensor([[[2.2489, 2.2489, 2.2489,  ..., 1.8893, 1.8893, 1.8893],\n","         [2.2489, 2.2489, 2.2489,  ..., 1.8893, 1.8893, 1.8893],\n","         [2.2489, 2.2489, 2.2489,  ..., 1.8893, 1.8893, 1.8893],\n","         ...,\n","         [2.2489, 2.2489, 2.2489,  ..., 2.2147, 2.2147, 2.2147],\n","         [2.2489, 2.2489, 2.2489,  ..., 2.2147, 2.2147, 2.2147],\n","         [2.2489, 2.2489, 2.2489,  ..., 2.2147, 2.2147, 2.2147]],\n","\n","        [[2.4286, 2.4286, 2.4286,  ..., 1.3606, 1.3606, 1.3606],\n","         [2.4286, 2.4286, 2.4286,  ..., 1.3606, 1.3606, 1.3606],\n","         [2.4286, 2.4286, 2.4286,  ..., 1.3606, 1.3606, 1.3606],\n","         ...,\n","         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n","         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286],\n","         [2.4286, 2.4286, 2.4286,  ..., 2.4286, 2.4286, 2.4286]],\n","\n","        [[1.6640, 1.6640, 1.6640,  ..., 0.6008, 0.6008, 0.6008],\n","         [1.6640, 1.6640, 1.6640,  ..., 0.6008, 0.6008, 0.6008],\n","         [1.6640, 1.6640, 1.6640,  ..., 0.6008, 0.6008, 0.6008],\n","         ...,\n","         [2.6400, 2.6400, 2.6400,  ..., 2.6051, 2.6051, 2.6051],\n","         [2.6400, 2.6400, 2.6400,  ..., 2.6051, 2.6051, 2.6051],\n","         [2.6400, 2.6400, 2.6400,  ..., 2.6051, 2.6051, 2.6051]]]), tensor(24))\n"]}]},{"cell_type":"markdown","source":["**Model**"],"metadata":{"id":"KrrWWQkA1THf"}},{"cell_type":"code","source":["import torch.nn as nn\n","import torch.optim as optim\n","import matplotlib.pyplot as plt\n","\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","#model = models.alexnet(pretrained=True)\n","#model.classifier[6] = nn.Linear(model.classifier[6].in_features, 100)\n","\n","model = models.resnet18(pretrained=False)\n","model.fc = nn.Linear(model.fc.in_features, 100)  # Assuming 100 classes for CIFAR-100\n","model = model.to(device)\n","\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model.parameters(), lr=0.001)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uSMzCLKKsFqi","executionInfo":{"status":"ok","timestamp":1716405039774,"user_tz":-540,"elapsed":606,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}},"outputId":"41f517aa-9e63-40cc-8554-1b36796b967c"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=None`.\n","  warnings.warn(msg)\n"]}]},{"cell_type":"markdown","source":["**Train**"],"metadata":{"id":"zEZH3sAl1Vli"}},{"cell_type":"code","source":["from tqdm import tqdm"],"metadata":{"id":"AChMWkG6sLYc","executionInfo":{"status":"ok","timestamp":1716405039774,"user_tz":-540,"elapsed":5,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["# Training and evaluation functions\n","def train(model, dataloader, criterion, optimizer):\n","    model.train()\n","    running_loss = 0.0\n","    correct = 0\n","    total = 0\n","    for images, labels in tqdm(dataloader, desc=\"Training\", leave=False):\n","        optimizer.zero_grad()\n","        images = images.to(device)\n","        labels = labels.to(device)\n","        outputs = model(images)\n","\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","        running_loss += loss.item()\n","\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","\n","    epoch_loss = running_loss / len(dataloader)\n","    accuracy = 100 * correct / total\n","    return epoch_loss, accuracy"],"metadata":{"id":"ag-uLmzHsO15","executionInfo":{"status":"ok","timestamp":1716405039774,"user_tz":-540,"elapsed":5,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["def evaluate(model, dataloader, criterion):\n","    model.eval()\n","    running_loss = 0.0\n","    correct = 0\n","    total = 0\n","    with torch.no_grad():\n","        for images, labels in tqdm(dataloader, desc=\"Evaluating\", leave=False):\n","            images = images.to(device)\n","            labels = labels.to(device)\n","            outputs = model(images)\n","\n","            loss = criterion(outputs, labels)\n","            running_loss += loss.item()\n","\n","            _, predicted = torch.max(outputs.data, 1)\n","            total += labels.size(0)\n","            correct += (predicted == labels).sum().item()\n","\n","    epoch_loss = running_loss / len(dataloader)\n","    accuracy = 100 * correct / total\n","    return epoch_loss, accuracy"],"metadata":{"id":"jJDUy-Sy3L0t","executionInfo":{"status":"ok","timestamp":1716405039774,"user_tz":-540,"elapsed":4,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["# Training loop\n","num_epochs = 30\n","train_losses = []\n","train_accuracies = []\n","test_losses = []\n","test_accuracies = []\n","\n","for epoch in range(num_epochs):\n","    print(f\"Epoch {epoch+1}/{num_epochs}\")\n","    train_loss, train_acc = train(model, train_dataloader, criterion, optimizer)\n","    test_loss, test_acc = evaluate(model, test_dataloader, criterion)\n","\n","    train_losses.append(train_loss)\n","    train_accuracies.append(train_acc)\n","    test_losses.append(test_loss)\n","    test_accuracies.append(test_acc)\n","\n","    print(f\"Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.2f}%, Test Loss: {test_loss:.4f}, Test Acc: {test_acc:.2f}%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"90oqDi6ssXe9","executionInfo":{"status":"ok","timestamp":1716410537184,"user_tz":-540,"elapsed":5497414,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}},"outputId":"e3963754-c966-4bdc-ae25-e8687aa15826"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 4.2357, Train Acc: 6.69%, Test Loss: 3.7015, Test Acc: 13.24%\n","Epoch 2/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 3.8657, Train Acc: 13.86%, Test Loss: 3.1977, Test Acc: 22.79%\n","Epoch 3/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 3.5250, Train Acc: 21.73%, Test Loss: 2.7585, Test Acc: 32.08%\n","Epoch 4/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 3.2040, Train Acc: 29.63%, Test Loss: 2.4287, Test Acc: 38.86%\n","Epoch 5/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 2.9568, Train Acc: 35.70%, Test Loss: 2.1862, Test Acc: 45.08%\n","Epoch 6/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 2.7333, Train Acc: 41.21%, Test Loss: 2.1464, Test Acc: 45.64%\n","Epoch 7/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 2.5094, Train Acc: 46.22%, Test Loss: 1.9959, Test Acc: 49.11%\n","Epoch 8/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 2.2413, Train Acc: 51.72%, Test Loss: 1.9834, Test Acc: 49.65%\n","Epoch 9/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 1.8936, Train Acc: 58.09%, Test Loss: 1.9742, Test Acc: 49.69%\n","Epoch 10/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 1.4150, Train Acc: 67.23%, Test Loss: 2.2860, Test Acc: 45.01%\n","Epoch 11/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.8679, Train Acc: 78.77%, Test Loss: 2.5414, Test Acc: 43.83%\n","Epoch 12/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.4289, Train Acc: 89.37%, Test Loss: 2.9610, Test Acc: 40.11%\n","Epoch 13/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.2310, Train Acc: 94.17%, Test Loss: 3.4613, Test Acc: 40.70%\n","Epoch 14/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.1822, Train Acc: 95.20%, Test Loss: 3.5808, Test Acc: 40.20%\n","Epoch 15/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.1798, Train Acc: 94.99%, Test Loss: 3.7808, Test Acc: 38.58%\n","Epoch 16/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.1545, Train Acc: 95.47%, Test Loss: 3.7115, Test Acc: 39.92%\n","Epoch 17/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.1287, Train Acc: 96.33%, Test Loss: 3.8784, Test Acc: 39.71%\n","Epoch 18/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.1299, Train Acc: 95.99%, Test Loss: 4.1366, Test Acc: 39.56%\n","Epoch 19/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.1356, Train Acc: 95.90%, Test Loss: 4.4103, Test Acc: 36.95%\n","Epoch 20/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.0944, Train Acc: 97.31%, Test Loss: 3.9857, Test Acc: 39.91%\n","Epoch 21/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.0898, Train Acc: 97.47%, Test Loss: 4.2070, Test Acc: 40.61%\n","Epoch 22/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.1157, Train Acc: 96.45%, Test Loss: 4.2920, Test Acc: 39.12%\n","Epoch 23/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.0807, Train Acc: 97.64%, Test Loss: 4.2259, Test Acc: 40.30%\n","Epoch 24/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.0934, Train Acc: 97.24%, Test Loss: 4.4152, Test Acc: 39.48%\n","Epoch 25/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.0947, Train Acc: 97.13%, Test Loss: 4.3901, Test Acc: 40.32%\n","Epoch 26/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.0766, Train Acc: 97.73%, Test Loss: 4.3353, Test Acc: 41.36%\n","Epoch 27/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.0704, Train Acc: 97.90%, Test Loss: 4.4431, Test Acc: 39.36%\n","Epoch 28/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.0699, Train Acc: 97.94%, Test Loss: 4.4582, Test Acc: 40.06%\n","Epoch 29/30\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.0873, Train Acc: 97.34%, Test Loss: 4.6486, Test Acc: 39.44%\n","Epoch 30/30\n"]},{"output_type":"stream","name":"stderr","text":["                                                             "]},{"output_type":"stream","name":"stdout","text":["Train Loss: 0.0697, Train Acc: 97.80%, Test Loss: 4.5755, Test Acc: 40.38%\n"]},{"output_type":"stream","name":"stderr","text":["\r"]}]},{"cell_type":"markdown","source":["**Plot**"],"metadata":{"id":"k1D7jvpaykoA"}},{"cell_type":"code","source":["# Plot the loss function and accuracy\n","plt.figure(figsize=(12, 5))\n","\n","plt.subplot(1, 2, 1)\n","plt.plot(range(1, num_epochs + 1), train_losses, label='Training Loss')\n","plt.plot(range(1, num_epochs + 1), test_losses, label='Test Loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.title('Loss Function Plot')\n","plt.legend()\n","\n","plt.subplot(1, 2, 2)\n","plt.plot(range(1, num_epochs + 1), train_accuracies, label='Training Accuracy')\n","plt.plot(range(1, num_epochs + 1), test_accuracies, label='Test Accuracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy (%)')\n","plt.title('Accuracy Plot')\n","plt.legend()\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"nZHZbfixshAo","executionInfo":{"status":"ok","timestamp":1716410537184,"user_tz":-540,"elapsed":21,"user":{"displayName":"Hyeong-geun Kim","userId":"15368136788960853126"}},"outputId":"91d279e0-1035-40fc-e288-6d7e3a07f6e8"},"execution_count":25,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"VbeU1AcJyQcv"},"execution_count":null,"outputs":[]}]}